const mongoose = require('mongoose');

const attendanceSchema = new mongoose.Schema({
  employee: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: true
  },
  date: {
    type: Date,
    required: true
  },
  checkIn: {
    time: Date,
    location: {
      latitude: Number,
      longitude: Number,
      address: String
    },
    method: {
      type: String,
      enum: ['manual', 'biometric', 'mobile', 'web', 'face-detection'],
      default: 'web'
    },
    deviceInfo: {
      userAgent: String,
      browser: String,
      os: String,
      device: String
    },
    ipAddress: String,
    screenshot: String, // Base64 or file path
    faceImage: String, // Path to face image for face detection attendance
    faceEmbedding: String, // Face embedding for verification
    isValidLocation: {
      type: Boolean,
      default: false
    },
    locationValidation: {
      ipValid: Boolean,
      geoValid: Boolean,
      wifiValid: Boolean
    }
  },
  checkOut: {
    time: Date,
    location: {
      latitude: Number,
      longitude: Number,
      address: String
    },
    method: {
      type: String,
      enum: ['manual', 'biometric', 'mobile', 'web', 'face-detection'],
      default: 'web'
    },
    deviceInfo: {
      userAgent: String,
      browser: String,
      os: String,
      device: String
    },
    ipAddress: String,
    earlyLeaveReason: String,
    faceImage: String, // Path to face image for face detection attendance
    faceEmbedding: String, // Face embedding for verification
    isValidLocation: {
      type: Boolean,
      default: false
    }
  },
  breaks: [{
    breakOut: Date,
    breakIn: Date,
    reason: String,
    duration: Number, // in minutes
    type: {
      type: String,
      enum: ['lunch', 'tea', 'personal', 'meeting', 'idle'],
      default: 'personal'
    },
    isAutoGenerated: {
      type: Boolean,
      default: false
    }
  }],
  idleTime: {
    totalIdleMinutes: {
      type: Number,
      default: 0
    },
    idleSessions: [{
      startTime: Date,
      endTime: Date,
      duration: Number, // in minutes
      reason: String,
      wasWarned: Boolean,
      autoLogout: Boolean
    }]
  },
  punchRecords: [{
    time: {
      type: Date,
      required: true
    },
    type: {
      type: String,
      enum: ['in', 'out'],
      required: true
    },
    method: {
      type: String,
      enum: ['manual', 'biometric', 'mobile', 'web', 'face-detection'],
      default: 'biometric'
    },
    deviceName: String,
    deviceSerialNumber: String,
    location: {
      latitude: Number,
      longitude: Number,
      address: String
    },
    ipAddress: String,
    notes: String
  }],
  totalHours: {
    type: Number,
    default: 0
  },
  regularHours: {
    type: Number,
    default: 0
  },
  overtimeHours: {
    type: Number,
    default: 0
  },
  status: {
    type: String,
    enum: ['present', 'absent', 'late', 'half-day', 'holiday', 'weekend', 'on-leave'],
    default: 'present'
  },
  workFromHome: {
    type: Boolean,
    default: false
  },
  leaveRequest: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'LeaveRequest'
  },
  isLate: {
    type: Boolean,
    default: false
  },
  lateMinutes: {
    type: Number,
    default: 0
  },
  earlyDeparture: {
    type: Boolean,
    default: false
  },
  earlyDepartureMinutes: {
    type: Number,
    default: 0
  },
  flexibleEndTime: {
    type: Date,
    default: null
  },
  isAutoCheckout: {
    type: Boolean,
    default: false
  },
  approvedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee'
  },
  approvedAt: Date,
  notes: String,
  isManualEntry: {
    type: Boolean,
    default: false
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Calculate total hours and status before saving
attendanceSchema.pre('save', function(next) {
  // Update check-in and check-out from punch records if available
  if (this.punchRecords && this.punchRecords.length > 0) {
    // Sort punch records by time
    const sortedPunches = [...this.punchRecords].sort((a, b) => new Date(a.time) - new Date(b.time));
    
    console.log(`üîÑ Pre-save hook: Processing ${sortedPunches.length} punch records`);
    
    // Filter IN punches and get the first one (first IN of the day)
    const inPunches = sortedPunches.filter(p => p.type === 'in');
    if (inPunches.length > 0) {
      const firstInPunch = inPunches[0];
      const newCheckInTime = new Date(firstInPunch.time);
      const existingCheckInTime = this.checkIn?.time ? new Date(this.checkIn.time) : null;
      
      // Always update if it's earlier or if no checkIn exists
      if (!existingCheckInTime || newCheckInTime < existingCheckInTime || newCheckInTime.getTime() !== existingCheckInTime.getTime()) {
        if (!this.checkIn) this.checkIn = {};
        this.checkIn.time = firstInPunch.time;
        this.checkIn.method = firstInPunch.method || 'biometric';
        this.checkIn.ipAddress = firstInPunch.ipAddress;
        if (firstInPunch.location) {
          this.checkIn.location = firstInPunch.location;
        }
        console.log(`‚úÖ Updated check-in to: ${new Date(firstInPunch.time).toISOString()}`);
      }
    }
    
    // Filter OUT punches and get the last one (last OUT of the day)
    const outPunches = sortedPunches.filter(p => p.type === 'out');
    if (outPunches.length > 0) {
      const lastOutPunch = outPunches[outPunches.length - 1];
      const newCheckOutTime = new Date(lastOutPunch.time);
      const existingCheckOutTime = this.checkOut?.time ? new Date(this.checkOut.time) : null;
      
      // Always update if it's later or if no checkOut exists
      if (!existingCheckOutTime || newCheckOutTime > existingCheckOutTime || newCheckOutTime.getTime() !== existingCheckOutTime.getTime()) {
        if (!this.checkOut) this.checkOut = {};
        this.checkOut.time = lastOutPunch.time;
        this.checkOut.method = lastOutPunch.method || 'biometric';
        this.checkOut.ipAddress = lastOutPunch.ipAddress;
        if (lastOutPunch.location) {
          this.checkOut.location = lastOutPunch.location;
        }
        console.log(`‚úÖ Updated check-out to: ${new Date(lastOutPunch.time).toISOString()}`);
      }
    }
  }
  
  // Calculate total hours between first and last punch (regardless of type)
  if (this.punchRecords && this.punchRecords.length > 0) {
    // Sort punch records by time
    const sortedPunches = [...this.punchRecords].sort((a, b) => new Date(a.time) - new Date(b.time));
    
    // Get first and last punch regardless of type
    const firstPunch = sortedPunches[0];
    const lastPunch = sortedPunches[sortedPunches.length - 1];
    
    // Calculate time between first and last punch
    const totalMs = new Date(lastPunch.time) - new Date(firstPunch.time);
    
    // Subtract break time
    const breakTime = this.breaks.reduce((total, brk) => {
      if (brk.breakOut && brk.breakIn) {
        return total + (brk.breakIn - brk.breakOut);
      }
      return total;
    }, 0);
    
    this.totalHours = Math.max(0, (totalMs - breakTime) / (1000 * 60 * 60)); // Convert to hours
    
    // Calculate regular and overtime hours (assuming 8 hours is regular)
    this.regularHours = Math.min(this.totalHours, 8);
    this.overtimeHours = Math.max(0, this.totalHours - 8);
    
    console.log(`‚è±Ô∏è  Total hours calculated: ${this.totalHours.toFixed(2)}h (from ${new Date(firstPunch.time).toTimeString().split(' ')[0]} to ${new Date(lastPunch.time).toTimeString().split(' ')[0]})`);
  } else if (this.checkIn?.time && this.checkOut?.time) {
    // Fallback to old logic if no punch records but checkIn/checkOut exist
    const totalMs = this.checkOut.time - this.checkIn.time;
    
    // Subtract break time
    const breakTime = this.breaks.reduce((total, brk) => {
      if (brk.breakOut && brk.breakIn) {
        return total + (brk.breakIn - brk.breakOut);
      }
      return total;
    }, 0);
    
    this.totalHours = Math.max(0, (totalMs - breakTime) / (1000 * 60 * 60)); // Convert to hours
    
    // Calculate regular and overtime hours (assuming 8 hours is regular)
    this.regularHours = Math.min(this.totalHours, 8);
    this.overtimeHours = Math.max(0, this.totalHours - 8);
    
    console.log(`‚è±Ô∏è  Total hours calculated: ${this.totalHours.toFixed(2)}h (from ${new Date(this.checkIn.time).toTimeString().split(' ')[0]} to ${new Date(this.checkOut.time).toTimeString().split(' ')[0]})`);
  }

  // Update timestamp
  this.updatedAt = Date.now();
  next();
});

// Indexes for better query performance
attendanceSchema.index({ employee: 1, date: 1 }, { unique: true });
attendanceSchema.index({ date: 1 });
attendanceSchema.index({ status: 1 });

module.exports = mongoose.model('Attendance', attendanceSchema);

